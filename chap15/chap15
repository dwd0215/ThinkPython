#14.1
# 模式字符串使用数字格式化编码组成的字符串
def sed(pattern_s,replace_s,filename1,filename2):
    try:
        fout1 = open(filename1,'r')
        fout2 = open(filename2,'w')
        fout1 = fout1.replace(pattern_s, replace_s)  # 模式字符串replace为替换字符串
        for line in fout1:
            fout2.write(line)  # 将文件1写入文件2
        fout1.close()
        fout2.close()
    except:
        print('Something went wrong.')

#14.2
import shelve
from anagram_sets import extract_letters,anagrams

def store_anagrams(filename):
    # 将anagram字典写入shelf
    d = anagrams()
    s = shelve.open(filename,'w',writeback=True)
    # ‘w’可读写，writeback=True，暂时将DB中读取对象放入内存缓存，当shelf被close时，会将缓存对象重新写入DB
    for key,value in d:
        s[key]=value
    s.close()

def read_anagrams(filename,word):
    # 查找一个单词word，并返回它在filename中对应的列表
    t = extract_letters(word)
    s = shelve.open(filename, 'r')
    # ‘r’只读
    if t in s.keys:
        return s[t]
    s.close()
    return 'This word is not in s'

#14.3.1
import os

def search_all_dir(folder,suffix):  # 函数接受一个形参folder，是要遍历的目标目录，返回一个该目录下（包括子目录）所有文件的列表
    t = []
    for root,dirs,files in os.walk(folder):
    # root当前正在遍历的文件夹本身地址；dirs是一个list，包含正在遍历的该目录中所有的目录；files也是一个list，包含该目录中所有的文件名
        for d,f in dirs,files:
            path1 = os.path.join(root,d)
            path2 = os.path.join(root,f)  # os.path.join()接受一个目录和文件名，将之合成一个完整路径
            if path1.endswith(suffix) and path2.endswith(suffix):  # 判定文件名是否以指定后缀结尾
                t.append(path1)
                t.append(path2)
    return t

#14.3.2





