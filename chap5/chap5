#5.1
import time
T=time.time()
Min=T//60
Hour=T//60//60
Day=T//24//60//60
print(Day,Hour,Min,T)

#5.2.1
def check_fermat(a,b,c,n):
    if a**n+b**n==c**n and n>2:
        print('Holy smokes, Fermat was wrong')
    else:
        print('No, that does not work')

#5.2.2
def com1(a,b,c,n):
    project1=input('Please use four values to instead of the a,b,c and n in check_fermat(a,b,c,n)\n')
    int(project1)
    check_fermat(a,b,c,n)

#5.3.1
def is_triangle(a,b,c):
    if a+b>=c or a+c>=b or b+c>=a:
        print('Yes')
    else:
        print('No')

#5.3.2
def com2(a,b,c):
    project2=input('Please use three values to instead of the a,b and c in is_triangle(a,b,c)\n')
    int(project2)
    is_triangle(a,b,c)

#5.4.1
def recurse(n,s):
    if n==0:
        print(s)
    else:
        recurse(n-1,n+s)
'''会陷入无限循环，因为n小于0，连减永远无法等于0'''

#5.4.2
'''n must be greater than or equal to zero, and must be an integer.'''

#5.5

import turtle
t=turtle.Turtle()

def draw(t,length,n):
    if n==0:
        return
    angle = 50
    t.fd(length*n)
    t.lt(angle)
    draw(t,length,n-1)
    t.rt(2*angle)
    draw(t,length,n-1)
    t.lt(angle)
    t.bk(length*n)

#5.6.1
def koch(t,length):
    if length < 3:
        t.fd(length)
    else:
        x = length/3
        koch(t,x)
        t.lt(60)
        koch(t,x)
        t.rt(120)
        koch(t,x)
        t.lt(60)
        koch(t,x)


#5.6.2
def snowflake(t,length):
    for i in range(3):
        koch(t,length)
        t.rt(120)

snowflake(t,102)

